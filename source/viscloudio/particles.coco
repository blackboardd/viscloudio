#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import sys

import matplotlib.pyplot as plt
from direct.particles.ParticleEffect import ParticleEffect
from direct.showbase.ShowBase import ShowBase
from panda3d.core import AmbientLight, Filename, LVector3
from scipy.fftpack import fft
from scipy.io import wavfile


class setup_viscloudio(ShowBase):
  '''
  A class to setup the audio visualizer.

  Attributes
  ----------
  audio_file: str
    the audio file to be played

  Methods
  -------
  load_particle_config(self, filename: str) -> None:
    Loads the particle configurations from a given filename

  setup_lights(self) -> None:
    Creates an ambient light to illuminate the scene

  setup_music(self, file: str) -> None:
    Loads a sound file and begins looping playback

  
  '''

  def __init__(self, audio_file: str):
    '''
    Constructs all the necessary attributes for the scene.

    Parameters
    ----------
    audio_file: str
      the audio file to be played
    '''
    ShowBase.__init__(self)
    ('escape', sys.exit) |*> self.accept

    base.disableMouse()
    (0, -20, 0) |*> base.camera.setPos
    90 |> base.camLens.setFov
    (0, 0, 0) |*> base.setBackgroundColor

    base.enableParticles()

    self.setup_lights()
    self.p = ParticleEffect()
    'assets/shaders/steam.ptf' |> self.load_particle_config
    audio_file |> self.setup_music

  def load_particle_config(self, filename: str) -> None:
    '''
    Loads the particle configurations from a given filename

    If the argument 'filename' is passed, the specified particle is loaded

    Parameters
    ----------
    filename: str
      filename to be loaded for use in particle emitter

    Returns
    -------
    None
    '''
    self.p.cleanup()
    self.p = ParticleEffect()
    filename |> Filename |> self.p.loadConfig
    self.p.start(parent = render, renderParent = render)

  def setup_lights(self) -> None:
    '''
    Creates an ambient light to illuminate the scene

    Returns
    -------
    None
    '''
    ambientLight = 'ambientLight' |> AmbientLight
    (0.4, 0.4, 0.35, 1.0) |> ambientLight.setColor

  def setup_music(self, file: str) -> None:
    '''
    Loads a sound file and begins looping playback

    Returns
    -------
    None
    '''
    self.m = file |> base.loader.loadSfx
    self.m.play()

setup_viscloudio(audio_file = './assets/audio/drum_loop.ogg').run()
